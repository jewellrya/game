{"id":"dev/js/map/noiseMap_macro.js","dependencies":[{"name":"/Users/ryanjewell/Desktop/coding/game/package.json","includedInParent":true,"mtime":1692146599251},{"name":"../_game.js","loc":{"line":5,"column":26,"index":254},"parent":"/Users/ryanjewell/Desktop/coding/game/dev/js/map/noiseMap_macro.js","resolved":"/Users/ryanjewell/Desktop/coding/game/dev/js/_game.js"},{"name":"noisejs","loc":{"line":6,"column":22,"index":291},"parent":"/Users/ryanjewell/Desktop/coding/game/dev/js/map/noiseMap_macro.js","resolved":"/Users/ryanjewell/Desktop/coding/game/node_modules/noisejs/index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.noiseMap_macro = noiseMap_macro;\nvar _game = require(\"../_game.js\");\nvar _noisejs = require(\"noisejs\");\n// 1. Chunk Definition: 32x32 tiles? Terrain type, objects present, elevation.\n// 2. World coordinate System (Chunk Coordinate System: World Coordinate / 32).\n// 3. Macro-Level Noise Map -> Chunk-Level Noise Map -> Tile-level.\n\n// Add a Bundler for this at some point.\n\nfunction noiseMap_macro() {\n  // const noise = new Noise(Math.random());\n  // const tileSize = 4;\n  // const mapSize = 200;\n\n  // for (let i = 0; i < mapSize; i++) {\n  //     for (let j = 0; j < mapSize; j++) {\n  //         const value = (noise.simplex2(i * 0.1, j * 0.1) + 1) / 2;  // Normalize value to [0,1]\n  //         const color = (value * 255).toFixed(0);\n\n  //         const graphics = new PIXI.Graphics();\n  //         graphics.beginFill(PIXI.utils.rgb2hex([color / 255, color / 255, color / 255]));\n  //         graphics.drawRect(i * tileSize, j * tileSize, tileSize, tileSize);\n  //         graphics.endFill();\n\n  //         gameScene.addChild(graphics);\n  //     }\n  // }\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"dev/js/map/noiseMap_macro.js","original":{"line":5,"column":0}},{"generated":{"line":7,"column":4},"source":"dev/js/map/noiseMap_macro.js","original":{"line":5,"column":0},"name":"_game"},{"generated":{"line":7,"column":9},"source":"dev/js/map/noiseMap_macro.js","original":{"line":5,"column":0}},{"generated":{"line":7,"column":12},"source":"dev/js/map/noiseMap_macro.js","original":{"line":5,"column":0},"name":"require"},{"generated":{"line":7,"column":19},"source":"dev/js/map/noiseMap_macro.js","original":{"line":5,"column":0}},{"generated":{"line":8,"column":0},"source":"dev/js/map/noiseMap_macro.js","original":{"line":6,"column":0}},{"generated":{"line":8,"column":4},"source":"dev/js/map/noiseMap_macro.js","original":{"line":6,"column":0},"name":"_noisejs"},{"generated":{"line":8,"column":12},"source":"dev/js/map/noiseMap_macro.js","original":{"line":6,"column":0}},{"generated":{"line":8,"column":15},"source":"dev/js/map/noiseMap_macro.js","original":{"line":6,"column":0},"name":"require"},{"generated":{"line":8,"column":22},"source":"dev/js/map/noiseMap_macro.js","original":{"line":6,"column":0}},{"generated":{"line":9,"column":0},"source":"dev/js/map/noiseMap_macro.js","original":{"line":1,"column":0}},{"generated":{"line":10,"column":0},"source":"dev/js/map/noiseMap_macro.js","original":{"line":2,"column":0}},{"generated":{"line":11,"column":0},"source":"dev/js/map/noiseMap_macro.js","original":{"line":3,"column":0}},{"generated":{"line":13,"column":0},"source":"dev/js/map/noiseMap_macro.js","original":{"line":6,"column":33}},{"generated":{"line":15,"column":0},"source":"dev/js/map/noiseMap_macro.js","original":{"line":8,"column":7}},{"generated":{"line":15,"column":9},"source":"dev/js/map/noiseMap_macro.js","original":{"line":8,"column":16},"name":"noiseMap_macro"},{"generated":{"line":15,"column":23},"source":"dev/js/map/noiseMap_macro.js","original":{"line":8,"column":30},"name":"noiseMap_macro"},{"generated":{"line":15,"column":24},"source":"dev/js/map/noiseMap_macro.js","original":{"line":8,"column":30}},{"generated":{"line":15,"column":26},"source":"dev/js/map/noiseMap_macro.js","original":{"line":8,"column":33}},{"generated":{"line":16,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":9,"column":4}},{"generated":{"line":17,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":10,"column":4}},{"generated":{"line":18,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":11,"column":4}},{"generated":{"line":20,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":13,"column":4}},{"generated":{"line":21,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":14,"column":4}},{"generated":{"line":22,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":15,"column":4}},{"generated":{"line":23,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":16,"column":4}},{"generated":{"line":25,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":18,"column":4}},{"generated":{"line":26,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":19,"column":4}},{"generated":{"line":27,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":20,"column":4}},{"generated":{"line":28,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":21,"column":4}},{"generated":{"line":30,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":23,"column":4}},{"generated":{"line":31,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":24,"column":4}},{"generated":{"line":32,"column":2},"source":"dev/js/map/noiseMap_macro.js","original":{"line":25,"column":4}},{"generated":{"line":33,"column":0},"source":"dev/js/map/noiseMap_macro.js","original":{"line":25,"column":4}}],"sources":{"dev/js/map/noiseMap_macro.js":"// 1. Chunk Definition: 32x32 tiles? Terrain type, objects present, elevation.\n// 2. World coordinate System (Chunk Coordinate System: World Coordinate / 32).\n// 3. Macro-Level Noise Map -> Chunk-Level Noise Map -> Tile-level.\n\nimport { gameScene } from '../_game.js';\nimport { Noise } from 'noisejs'; // Add a Bundler for this at some point.\n\nexport function noiseMap_macro() {\n    // const noise = new Noise(Math.random());\n    // const tileSize = 4;\n    // const mapSize = 200;\n\n    // for (let i = 0; i < mapSize; i++) {\n    //     for (let j = 0; j < mapSize; j++) {\n    //         const value = (noise.simplex2(i * 0.1, j * 0.1) + 1) / 2;  // Normalize value to [0,1]\n    //         const color = (value * 255).toFixed(0);\n\n    //         const graphics = new PIXI.Graphics();\n    //         graphics.beginFill(PIXI.utils.rgb2hex([color / 255, color / 255, color / 255]));\n    //         graphics.drawRect(i * tileSize, j * tileSize, tileSize, tileSize);\n    //         graphics.endFill();\n\n    //         gameScene.addChild(graphics);\n    //     }\n    // }\n}"},"lineCount":null}},"error":null,"hash":"b2ff2d2673de942ad7e7317fe9a73209","cacheData":{"env":{}}}